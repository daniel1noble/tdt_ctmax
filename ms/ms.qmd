---
title: "Box 1 - TDT Curves"
bibliography: ../bib/refs.bib
csl: ../bib/nature.csl
format:
  docx:
    reference-doc: ../bib/template.docx
editor_options: 
  chunk_output_type: console
execute:
  freeze: auto  # re-render only when source changes
  cache: false
  echo: false
  warning: false
  error: false
  include: true
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
  title-delim: "-"
  fig-prefix: "Figure"
  tbl-prefix: "Table"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, tidy = TRUE, fig.width = 10)
## numbers >= 10^5 will be denoted in scientific notation,		  ## numbers >= 10^5 will be denoted in scientific notation,
  ## and rounded to 2 digits		  ## and rounded to 2 digits
  options(digits = 2)

##################################
# Clean workspace
##################################
    rm(list=ls())

##################################
# Loading packages & Functions
##################################
    pacman::p_load(tidyverse,  metafor, flextable,  patchwork, ggtree, ape, phytools, viridis, MCMCglmm, brms, latex2exp, orchaRd, multcomp, bayesplot, here, readxl)

##################################
# Functions
##################################

  source(here::here("R", "func.R"))

##################################
# Loading tree and data
##################################
# Bring in the fly tree
  tree <- read.tree(here::here("phylogeny/", "drosi2.tre"))

# Grab our data
   data <- read.csv(here::here("data", "drosi_data.csv"))
```

```{r, newspp}
#| label: newspp
#| echo: false
#| message: false
#| include: false

# Load the data
  spp <- read_excel(here::here("data", "tdt_data.xlsx"), sheet = "data")

# Calcluate the TDT
  tdt <- split(spp, spp$group) 

# Calculations
  txt <- plyr::ldply(lapply(tdt, function(x) tdt_calc(data = x)))

```

We can have a look at each new species' TDT curves collected by Vanessa (@fig-tdt). We can also use the data to calculate the TDT curve (slope) and $CT_{max}$ for each species (@tbl-1). 

```{r, fig-tdt}
#| label: fig-tdt
#| fig-cap: TDT curves for each species. The x-axis is temperature and the y-axis is the log10 of the time to coma. 
#| message: false
#| echo: false

# Lets have a look at the data
  #ggplot2::ggplot(data, ggplot2::aes(x = assay_temp, y = log10(t_coma), colour = group)) + ggplot2::geom_point() + #ggplot2::facet_wrap(~group, nrow = 2, ncol = 4) +ggplot2::labs(x = "Temperature", y = "log 10 Coma Time") + #ggplot2::theme_bw() 
  
# Fecet wrap doesn't seem to want to work
  par(mfrow=c(2,4))
  invisible(lapply(tdt, function(x) plot(log10(x$t_coma) ~ x$assay_temp,  main= unique(x$group), xlab = "Temperature", ylab = "log 10 Coma Time", pch = 16, col = "black")))
```

```{r, tbl-1}
#| label: tbl-1
#| tbl-cap: Estimated parameters for each of the 8 new species. 
flextable(txt) %>% align(align = "center", part = "all") %>% font(fontname="Times", part = "body") %>% 
    font(fontname="Times", part = "header")  %>%  autofit()
```

```{r, fig-tdt2}
```

```{r, treesetup}
#| label: treesetup
#| echo: false
#| message: false
#| include: false

# Ultrametric?
  is.ultrametric(tree) # nope
  tree2 <- force.ultrametric(tree, method = "extend")

# functions
  source(here::here("R", "func.R"))
  t <- tree_checks(tree2, data = data, dataCol = "species", type = "check")
  data <- data %>% mutate(species = gsub(" ", "", species),
                          phylo = species,
                          obs = 1:n()) %>% filter(!species %in% t$Species_InData_But_NotTree) 
  tree3 <- tree_checks(tree2, data = data, dataCol = "species", type = "prune")
  tree_checks(tree3, data = data, dataCol = "species", type = "check")

  # Grab phylo matrix
  phy_vcv <- vcv(tree3, cor = FALSE)
  tree3$node.label <- NULL

```

```{r, models}
#| label: models
#| echo: false
#| include: false
#| 
### MCMCglmm Bayesian models. Deals with missing data using data augmentation

rerun = FALSE
if(rerun){
    prior = list(R = list(V = diag(3), nu=1.002), 
               G = list(G1=list(V = diag(3), nu = 1.002)))
  
  data$animal = data$phylo
  
  mcmcglmm_model <- MCMCglmm::MCMCglmm(cbind(ctmax, cfts, tdt_z) ~ -1 + trait, random = ~us(trait):animal, rcov = ~us(trait):units ,pedigree=tree3,burnin=1000, nitt = 300000, thin = 5, family = rep("gaussian", 3), prior = prior, pl = TRUE, pr = TRUE, data = data)
  
  # We'll also z-transform to make the correlation easier to calculate. 
  data <- data %>% mutate(z_ctmax = scale(ctmax),
                           z_cfts = scale(cfts),
                          z_tdt_z = scale(tdt_z))
  
  mcmcglmm_model_z_trans <- MCMCglmm::MCMCglmm(cbind(z_ctmax, z_cfts, z_tdt_z) ~ -1 + trait, random = ~us(trait):animal, rcov = ~us(trait):units, pedigree=tree3,burnin=1000, nitt = 300000, thin = 5, family = rep("gaussian", 3), prior = prior, pl = TRUE, pr = TRUE, data = data)
  
  # Ditch phylogeny to see if there is support for including it or not. DIC is WAY lower for phylogenetic model, so good to include it.
  prior2 = list(R = list(V = diag(3), nu=1.002))
  mcmcglmm_model_z_trans_nophylo <- MCMCglmm::MCMCglmm(cbind(z_ctmax, z_cfts, z_tdt_z) ~ -1 + trait, rcov = ~us(trait):units, pedigree=tree3,burnin=1000, nitt = 300000, thin = 5, family = rep("gaussian", 3), prior = prior2, pl = TRUE, pr = TRUE, data = data)
  
  saveRDS(mcmcglmm_model, file =  here::here("output/model", "mcmcglmm_model"))
  saveRDS(mcmcglmm_model_z_trans, file = here::here("output/model", "mcmcglmm_model_z_trans")) 
  saveRDS(mcmcglmm_model_z_trans_nophylo, file =  here::here("output/model", "mcmcglmm_model_z_trans_nophylo")) 
} else{
                mcmcglmm_model <- readRDS(here::here("output/model/", "mcmcglmm_model"))
        mcmcglmm_model_z_trans <- readRDS(here::here("output/model/", "mcmcglmm_model_z_trans"))
mcmcglmm_model_z_trans_nophylo <- readRDS(here::here("output/model/", "mcmcglmm_model_z_trans_nophylo"))
}

```

```{r, posteriors}
#| label: posteriors
#| echo: false
#| include: false
#| 
# Extract posterior estimates
  sol <- mcmcglmm_model$Sol
  vcv <- mcmcglmm_model$VCV

# Extract the estimated / imputed Z for each species, but drop internal ancestral nodes
  z_blups <- sol[, grep("traittdt_z.animal", colnames(sol))]
  z_blups <- z_blups[,-grep("Node", colnames(z_blups))]
  head(z_blups)

# Remember that these are BLUPs. They are deviations from the intercept. So, to get back to the z we need to add the intercept to each of them.
  z <- z_blups + sol[, "traittdt_z"]

# Clean up names so they are just species names
  colnames(z) <- gsub("traittdt_z.animal.", "", colnames(z))

# Have a look at how well the model gets the actual data correct.
  z_known <- data %>% filter(!is.na(tdt_z)) %>% dplyr::select(species, tdt_z) %>% distinct()
    z_est <- apply(z, 2, function(x) median(x))
    z_est <- z_est[which(colnames(z) %in% z_known$species)]
    z_est <- data.frame(z_est)
    z_est$species <- row.names(z_est)
  check_z <- left_join(z_known, z_est, by = "species")

  # Check phylogeneic signal. Need to think about the covariance here. 
    # CTMax - Yes
      phylo_ctmax <- vcv[,"traitctmax:traitctmax.animal"]
      units_ctmax <- vcv[,"traitctmax:traitctmax.units"]
      
      h2_ctmax = phylo_ctmax / (phylo_ctmax + units_ctmax)
      posterior.mode(h2_ctmax)
      HPDinterval(h2_ctmax)
    
    # CFL - Yes
      phylo_cfls <- vcv[,"traitcfts:traitcfts.animal"]
      units_cfls <- vcv[,"traitcfts:traitcfts.units"]
      
      h2_cfls = phylo_cfls / (phylo_cfls + units_cfls)
      posterior.mode(h2_cfls)
      HPDinterval(h2_cfls)
      
    # z - Yes
      phylo_z <- vcv[,"traittdt_z:traittdt_z.animal"]
      units_z <- vcv[,"traittdt_z:traittdt_z.units"]
      
      h2_z = phylo_z / (phylo_z + units_z)
      posterior.mode(h2_z)
      HPDinterval(h2_z)
```

```{r, fig-tree}
#| label: fig-tree
#| fig-cap: "Phylogenetic relationships among `r length(tree$tip.label)` *Drosophila* species."

# Plot the tree
  plot(tree, cex = 0.2)
```

```{r, posteriorsz}
# We'll now plot the posterior distributions for each species.Obviously our 11 species with known data will have a much tighter distribution. You can see that in the plot. But the imputations are our 'best" guess based on the strong phylogenetic signal in the data. We can also always propagate the uncertainty across any subsequent analysis (like for example our micro-climate models)
  mcmc_areas(z[,1:15],prob = 0.8)
```

## References
